trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  
name: '1.0.$(Rev:r)'

steps:
- task: DotNetCoreCLI@2
  displayName: 'Build Library'
  inputs:
    command: 'build'
    projects: 'Serializer/Serializer.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(Build.BuildNumber)'

- task: DotNetCoreCLI@2
  displayName: 'Test Library'
  inputs:
    command: 'test'
    projects: 'SerializerTest/SerializerTest.csproj'
    testRunTitle: 'Multipart Serializer Test'

- task: DotNetCoreCLI@2
  displayName: 'Publish library'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'Serializer/Serializer.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(Build.BuildNumber)'
    
- task: DotNetCoreCLI@2
  displayName: 'Pack Library'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    versioningScheme: 'byBuildNumber'

- task: DotNetCoreCLI@2
  displayName: 'Uploading to Private Nuget'
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: '0bd21b8b-3ec1-4cf1-9e2a-c491e2a220a5'

- task: NuGetCommand@2
  condition: and(succeeded(), eq(variables.nuget, true))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'Nuget.Org'

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'Tiberhealth GitHub'
    repositoryName: 'tiberhealth/XsvSerializer'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'userSpecifiedTag'
    tag: 'v$(MajorVersion).$(MinorVersion).$(PatchVersion)'
    releaseNotesFilePath: 'README.md'
    changeLogCompareToRelease: 'lastFullRelease'
    changeLogType: 'commitBased'